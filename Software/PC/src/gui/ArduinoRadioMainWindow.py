"""Subclass of MainWindow, which is generated by wxFormBuilder."""

import wx
import wx.lib.newevent
from gui import MainWindow
from gui.SelectPortDlg import SelectPortDlg
from utilities import configuration
from utilities.configuration import FrequencyRange
from utilities.formatters import format_frequency_range
from utilities import serial

import logging
logger = logging.getLogger(__name__)

SerialRxEvent, EVT_SERIALRX = wx.lib.newevent.NewEvent()
SERIALRX = wx.NewEventType()


        
# Implementing MainWindow
class ArduinoRadioMainWindow( MainWindow.MainWindow ):
	def __init__( self, parent ):
		MainWindow.MainWindow.__init__( self, parent )
		self.configuration= configuration.Configuration()
		self.config = self.configuration.config_view
		self.serial_port=serial.SerialIO(self, SerialRxEvent)
		
		self.tuning_slider.Bind(wx.EVT_SLIDER, self.tuning_sliderOnSlider)
		self.set_band(self.config.current_band_index)
		self.set_volume(self.config.current_volume, update_control=True)
  
		self.populate_band_chooser()
		self.band_switch.SetSelection(self.config.current_band_index)
  
		self.status_bar.SetStatusText("Disconnected", 0)
		self.status_bar.SetStatusText("Port: {0}".format(self.config.port),1)
		self.status_bar.SetStatusText("Baud Rate: {0}".format(self.config.baud_rate))
		self.Bind(EVT_SERIALRX, self.serial_receive)
    
	# Utilities
	def resize_slider(self) -> None:
		window_size=self.GetSize()
		control_size=self.tuning_slider.GetSize()
		self.tuning_slider.SetSize(wx.Size(window_size.width-20,control_size.height))
  
	def set_band(self, band_index:int) -> None:
		self.config.current_band_index=band_index
		band=self.config.bands[band_index]
		f_min=int(band.f_min*band.scale)
		f_max=int(band.f_max*band.scale)
		self.tuning_slider.SetRange(f_min, f_max)
		self.static_min_frequency.SetLabel("{0}{1}".format(band.f_min,band.units))
		self.static_max_frequency.SetLabel("{0}{1}".format(band.f_max,band.units))
		self.serial_send("sb,{0},{1},{2},{3},{4},{5}".format(f_min,
                                                              		f_max,
                                                                	band.scale,
																	band.units,
																	band.format,
																	band.label
                                                                 ))
		self.set_frequency(band.current_frequency, update_control=True)

	def set_frequency(self, freq:int, update_control:bool=False) -> None:
		current_band=self.config.bands[self.config.current_band_index]
		current_band.current_frequency=freq
		if update_control:
			self.tuning_slider.SetValue(freq)
		self.static_current_frequency.SetLabel("{0}".format(freq))
		x=self.serial_send("sf,{:d}".format(freq))
		# ToDo: insert board command

	def set_volume(self, volume:int, update_control:bool=False) -> None:
		self.config.current_volume=volume
		if update_control:
			self.volume_control.SetValue(volume)
		self.serial_send('sv,{:d}'.format(volume))

		
	def populate_band_chooser(self) -> None:
		self.band_switch.Clear()
		for band in self.config.bands:
			self.band_switch.Append(format_frequency_range(band))
   
	def serial_send(self, cmd:str) -> None:
		self.terminal_text_ctrl.AppendText(cmd + '\n')
		self.serial_port.write_string(cmd + '\n')
  
     
	# Handlers for MainWindow events.
	def MainWindowOnShow( self, event ):
		self.resize_slider()
		self.serial_port.open(self.config.port, self.config.baud_rate)
		pass

	def MainWindowOnSize(self, event):
		self.resize_slider()
  
	def MainWindowOnClose(self, event):
		self.serial_port.close()
		self.configuration.update_configuration()
		self.Destroy()
  
	def tuning_sliderOnSlider(self,event):
		self.tuning_slider.GetValue()
		self.set_frequency(self.tuning_slider.GetValue())

	def volume_controlOnSpinCtrl(self, event):
		volume=self.volume_control.GetValue()
		self.set_volume(volume)
		pass

	def band_switchOnChoice(self, event):
		band_index=self.band_switch.GetSelection()
		if band_index != wx.NOT_FOUND:
			self.set_band(band_index)
		pass

	def command_entryOnTextEnter(self,event):
		to_send=self.command_entry.GetValue()+'\n'
		self.terminal_text_ctrl.AppendText(to_send)
		self.serial_port.write_string(to_send)
		self.command_entry.Clear()
		pass

	# Menu Events
	def file_select_portOnMenuSelection(self, event):
		dlg=SelectPortDlg(self)
		if dlg.ShowModal() == wx.OK:
			self.config.port = dlg.get_port()
			self.config.baud_rate = dlg.get_baud_rate()
			self.configuration.update_configuration()
			self.serial_port.close()
			self.serial_port.open(self.config.port, self.config.baud_rate)
			self.status_bar.SetStatusText("Port: {0}".format(self.config.port),1)
		pass
	
	def file_exitOnMenuSelection(self, event):
		self.MainWindowOnClose(event)

	# Bound Events
	def serial_receive(self,event):
		default_style=self.terminal_text_ctrl.GetDefaultStyle()
		self.terminal_text_ctrl.SetDefaultStyle(wx.TextAttr(wx.ColourDatabase().Find('MEDIUM FOREST GREEN')))
		self.terminal_text_ctrl.AppendText(event.data.decode('UTF-8', 'replace'))
		self.terminal_text_ctrl.SetDefaultStyle(default_style)
		pass