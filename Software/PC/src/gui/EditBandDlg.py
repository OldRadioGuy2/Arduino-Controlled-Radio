"""Subclass of EditBandDlg, which is generated by wxFormBuilder."""

import wx
import gui.MainWindow
from utilities.db import Band

# Implementing EditBandDlg


class EditBandDlg(gui.MainWindow.EditBandDlg):
    """Dialog to Edit the Band Information"""
    def __init__(self, parent, band_info: Band = None):
        """
        Parameters
        ----------
        parent: Frame
        	This dialog's parent
        band_info: Band
			Initial content of the controls. If none, then blank for new entry
        """
        gui.MainWindow.EditBandDlg.__init__(self, parent)
        if band_info is None:
            self.band_info=Band(label="",f_min=0, f_max=0, scale=1, units='KHz',mode='AM')
        else:
        	self.band_info: Band = band_info

    def EditBandDlgOnInitDialog(self, event):
        if self.band_info is not None:
            self.band_label_txt.SetValue(self.band_info.label)
            self.min_freq_dbl_spin.SetValue(self.band_info.f_min)
            self.max_freq_dbl_spin.SetValue(self.band_info.f_max)
            index = self.units_choice.FindString(self.band_info.units)
            self.units_choice.SetSelection(index)
            index = self.mode_choice.FindString(self.band_info.mode)
            self.mode_choice.SetSelection(index)

    def ok_btnOnButtonClick(self, event):
        self.band_info.label = self.band_label_txt.GetValue()
        self.band_info.f_min = self.min_freq_dbl_spin.GetValue()
        self.band_info.f_max = self.max_freq_dbl_spin.GetValue()
        self.band_info.units = self.units_choice.GetStringSelection()
        self.band_info.mode = self.mode_choice.GetStringSelection()
        if self.band_info.current_frequency < self.band_info.f_max or self.band_info.current_frequency > self.band_info.f_max:
            self.band_info.current_frequency = (
                self.band_info.f_min+self.band_info.f_max)/2
        self.EndModal(wx.OK)

    def cancel_btnOnButtonClick(self, event):
        self.EndModal(wx.CANCEL)
